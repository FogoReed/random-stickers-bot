import telebot
import sqlite3
import random
import datetime
import time
import os
from dotenv import load_dotenv

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

processed_media_groups = {}  # media_group_id: timestamp

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn = sqlite3.connect("packs.db", check_same_thread=False)

def log(msg):
    print(f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {msg}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
with conn:
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS packs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        set_name TEXT,
        sticker_count INTEGER DEFAULT 0,
        status TEXT DEFAULT 'allowed',
        UNIQUE(chat_id, set_name)
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS chat_settings (
        chat_id INTEGER PRIMARY KEY,
        pack_limit INTEGER DEFAULT 50,
        reply_chance REAL DEFAULT 0.05
    )
    """)
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ reply_chance
    cur.execute("PRAGMA table_info(chat_settings)")
    columns = [col[1] for col in cur.fetchall()]
    if "reply_chance" not in columns:
        cur.execute("ALTER TABLE chat_settings ADD COLUMN reply_chance REAL DEFAULT 0.05")
        conn.commit()
        log("–ö–æ–ª–æ–Ω–∫–∞ reply_chance –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ chat_settings")


def get_pack_limit(chat_id):
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT pack_limit FROM chat_settings WHERE chat_id=?", (chat_id,))
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("INSERT OR IGNORE INTO chat_settings (chat_id, pack_limit, reply_chance) VALUES (?, ?, ?)",
                    (chat_id, 50, 0.05))
        return 50


def get_reply_chance(chat_id):
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT reply_chance FROM chat_settings WHERE chat_id=?", (chat_id,))
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("INSERT OR IGNORE INTO chat_settings (chat_id, pack_limit, reply_chance) VALUES (?, ?, ?)",
                    (chat_id, 50, 0.05))
        return 0.05


def set_reply_chance(chat_id, chance):
    with conn:
        cur = conn.cursor()
        cur.execute("INSERT OR REPLACE INTO chat_settings (chat_id, pack_limit, reply_chance) "
                    "VALUES (?, COALESCE((SELECT pack_limit FROM chat_settings WHERE chat_id=?), 50), ?)",
                    (chat_id, chat_id, chance))


def count_packs(chat_id):
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM packs WHERE chat_id=? AND status='allowed'", (chat_id,))
        row = cur.fetchone()
        return row[0] if row else 0


def count_stickers(chat_id):
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT SUM(sticker_count) FROM packs WHERE chat_id=? AND status='allowed'", (chat_id,))
        row = cur.fetchone()
        return row[0] if row and row[0] else 0


def send_random_sticker(chat_id, reply_to_message_id=None):
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT set_name FROM packs WHERE chat_id=? AND status='allowed' ORDER BY RANDOM() LIMIT 1",
                    (chat_id,))
        row = cur.fetchone()

    if not row:
        log(f"chat_id={chat_id}: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞")
        return False
    pack_name = row[0]

    try:
        sticker_set = bot.get_sticker_set(pack_name)
        sticker = random.choice(sticker_set.stickers)
        bot.send_sticker(chat_id, sticker.file_id, reply_to_message_id=reply_to_message_id)
        log(f"chat_id={chat_id}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –∏–∑ –ø–∞–∫–∞ '{pack_name}'")
        return True
    except Exception as e:
        log(f"chat_id={chat_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø–∞–∫–∞ '{pack_name}': {e}")
        return False


@bot.message_handler(content_types=["sticker"])
def handle_sticker(message):
    chat_id = message.chat.id
    pack_name = message.sticker.set_name

    if not pack_name:
        log(f"chat_id={chat_id}: –°—Ç–∏–∫–µ—Ä –±–µ–∑ set_name, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
        return

    with conn:
        cur = conn.cursor()
        cur.execute("SELECT status FROM packs WHERE chat_id=? AND set_name=?", (chat_id, pack_name))
        row = cur.fetchone()

    if row and row[0] == "banned":
        log(f"chat_id={chat_id}: –ü–∞–∫ '{pack_name}' –≤ –ß–°, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
        return

    limit = get_pack_limit(chat_id)
    current_count = count_packs(chat_id)
    if current_count >= limit:
        log(f"chat_id={chat_id}: –õ–∏–º–∏—Ç –ø–∞–∫–æ–≤ {limit} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ–≤—ã–π –ø–∞–∫ '{pack_name}' –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        return

    try:
        sticker_set = bot.get_sticker_set(pack_name)
        sticker_count = len(sticker_set.stickers)
    except Exception as e:
        log(f"chat_id={chat_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è '{pack_name}': {e}")
        sticker_count = 0

    try:
        with conn:
            cur = conn.cursor()
            cur.execute("INSERT INTO packs (chat_id, set_name, sticker_count) VALUES (?, ?, ?)",
                        (chat_id, pack_name, sticker_count))
        log(f"chat_id={chat_id}: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞–∫ '{pack_name}' ({sticker_count} —Å—Ç–∏–∫–µ—Ä–æ–≤)")
    except sqlite3.IntegrityError:
        log(f"chat_id={chat_id}: –ü–∞–∫ '{pack_name}' —É–∂–µ –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫")


@bot.message_handler(commands=["random_pack"])
def random_pack(message):
    chat_id = message.chat.id
    log(f"chat_id={chat_id}: –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä (/random_pack)")
    if not send_random_sticker(chat_id, reply_to_message_id=message.message_id):
        bot.reply_to(message, "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤.")


@bot.message_handler(commands=["stats"])
def stats(message):
    chat_id = message.chat.id
    limit = get_pack_limit(chat_id)
    count = count_packs(chat_id)
    stickers_total = count_stickers(chat_id)
    log(f"chat_id={chat_id}: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (/stats)")
    bot.reply_to(message, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∞–∫–æ–≤: {count}\n–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {stickers_total}\n–õ–∏–º–∏—Ç –ø–∞–∫–æ–≤: {limit}")


@bot.message_handler(commands=["set_reply_chance"])
def set_reply_chance_command(message):
    chat_id = message.chat.id
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_reply_chance <—á–∏—Å–ª–æ –≤ %>")
        return
    try:
        new_chance = float(args[1]) / 100
        if not (0 <= new_chance <= 1):
            raise ValueError()
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    set_reply_chance(chat_id, new_chance)
    bot.reply_to(message, f"–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {args[1]}%")
    log(f"chat_id={chat_id}: –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {args[1]}%")


@bot.message_handler(commands=["get_reply_chance"])
def get_reply_chance_command(message):
    chat_id = message.chat.id
    chance = get_reply_chance(chat_id) * 100
    bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–º: {chance:.2f}%")
    log(f"chat_id={chat_id}: –ó–∞–ø—Ä–æ—à–µ–Ω —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ ({chance:.2f}%)")


@bot.message_handler(commands=["ban_pack"])
def ban_pack(message):
    chat_id = message.chat.id
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban_pack <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–∫–∞>")
        return
    pack_name = args[1]

    with conn:
        cur = conn.cursor()
        cur.execute("UPDATE packs SET status='banned' WHERE chat_id=? AND set_name=?", (chat_id, pack_name))
        if cur.rowcount == 0:
            bot.reply_to(message, f"–ü–∞–∫ {pack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            log(f"chat_id={chat_id}: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–∞–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫ '{pack_name}'")
        else:
            bot.reply_to(message, f"–ü–∞–∫ {pack_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–° üö´")
            log(f"chat_id={chat_id}: –ü–∞–∫ '{pack_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°")


@bot.message_handler(commands=["unban_pack"])
def unban_pack(message):
    chat_id = message.chat.id
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban_pack <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–∫–∞>")
        return
    pack_name = args[1]

    with conn:
        cur = conn.cursor()
        cur.execute("UPDATE packs SET status='allowed' WHERE chat_id=? AND set_name=?", (chat_id, pack_name))
        if cur.rowcount == 0:
            bot.reply_to(message, f"–ü–∞–∫ {pack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            log(f"chat_id={chat_id}: –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫ '{pack_name}'")
        else:
            bot.reply_to(message, f"–ü–∞–∫ {pack_name} —É–±—Ä–∞–Ω –∏–∑ –ß–° ‚úÖ")
            log(f"chat_id={chat_id}: –ü–∞–∫ '{pack_name}' —É–±—Ä–∞–Ω –∏–∑ –ß–°")


@bot.message_handler(commands=["list_packs"])
def list_packs(message):
    chat_id = message.chat.id
    with conn:
        cur = conn.cursor()
        cur.execute("SELECT set_name, status FROM packs WHERE chat_id=?", (chat_id,))
        rows = cur.fetchall()

    if not rows:
        bot.reply_to(message, "–í –±–∞–∑–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞–∫–æ–≤.")
        log(f"chat_id={chat_id}: –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–∞–∫–æ–≤, –Ω–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞")
        return

    text = "–°–ø–∏—Å–æ–∫ –ø–∞–∫–æ–≤:\n"
    for set_name, status in rows:
        emoji = "‚úÖ" if status == "allowed" else "üö´"
        text += f"{emoji} {set_name}\n"
    bot.reply_to(message, text)
    log(f"chat_id={chat_id}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–∞–∫–æ–≤ (–∫–æ–ª-–≤–æ: {len(rows)})")


@bot.message_handler(commands=["clear_packs"])
def clear_packs(message):
    chat_id = message.chat.id
    with conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM packs WHERE chat_id=?", (chat_id,))
    bot.reply_to(message, "–ë–∞–∑–∞ –ø–∞–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
    log(f"chat_id={chat_id}: –û—á–∏—â–µ–Ω–∞ –±–∞–∑–∞ –ø–∞–∫–æ–≤")


@bot.message_handler(commands=["set_pack_limit"])
def set_pack_limit(message):
    chat_id = message.chat.id
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_pack_limit <—á–∏—Å–ª–æ>")
        return
    try:
        new_limit = int(args[1])
        if new_limit <= 0:
            raise ValueError()
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    with conn:
        cur = conn.cursor()
        cur.execute("INSERT OR REPLACE INTO chat_settings (chat_id, pack_limit, reply_chance) "
                    "VALUES (?, ?, COALESCE((SELECT reply_chance FROM chat_settings WHERE chat_id=?), 0.05))",
                    (chat_id, new_limit, chat_id))
    bot.reply_to(message, f"–õ–∏–º–∏—Ç –ø–∞–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}.")
    log(f"chat_id={chat_id}: –õ–∏–º–∏—Ç –ø–∞–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}")


@bot.message_handler(commands=["get_pack_limit"])
def get_pack_limit_command(message):
    chat_id = message.chat.id
    limit = get_pack_limit(chat_id)
    bot.reply_to(message, f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø–∞–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {limit}.")
    log(f"chat_id={chat_id}: –ó–∞–ø—Ä–æ—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–∫–æ–≤ ({limit})")


@bot.message_handler(commands=["help"])
def help_command(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/random_pack ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞–∫–æ–≤\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –≤ —á–∞—Ç–µ\n"
        "/ban_pack <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–∫–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–∫ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/unban_pack <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–∫–∞> ‚Äî —É–±—Ä–∞—Ç—å –ø–∞–∫ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/list_packs ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/clear_packs ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ø–∞–∫–æ–≤ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/set_pack_limit <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–∞–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/get_pack_limit ‚Äî —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø–∞–∫–æ–≤\n"
        "/set_reply_chance <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–º (%)\n"
        "/get_reply_chance ‚Äî —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–º\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.reply_to(message, help_text)
    log(f"chat_id={message.chat.id}: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–º–æ—â—å (/help)")


@bot.message_handler(content_types=["text", "photo", "video", "animation", "video_note"])
def random_reply(message):
    chat_id = message.chat.id

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º (media group) ===
    if hasattr(message, "media_group_id") and message.media_group_id:
        group_id = message.media_group_id
        now = time.time()
        # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if group_id in processed_media_groups and now - processed_media_groups[group_id] < 60:
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ —Ä–µ–∞–∫—Ü–∏–∏
        processed_media_groups[group_id] = now

    # === –õ–æ–≥–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ ===
    if message.content_type == "text":
        chance = get_reply_chance(chat_id)
        roll = random.random()
        if roll < chance:
            log(f"chat_id={chat_id}: –¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª (roll={roll:.3f} < chance={chance})")
            send_random_sticker(chat_id, reply_to_message_id=message.message_id)
        else:
            log(f"chat_id={chat_id}: –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (roll={roll:.3f}, chance={chance})")
    else:
        # –¥–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ–æ–∫/–∫—Ä—É–∂–æ—á–∫–æ–≤ ‚Üí 100%
        log(f"chat_id={chat_id}: –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message.content_type}), —Ä–µ–∞–≥–∏—Ä—É–µ–º 100%")
        send_random_sticker(chat_id, reply_to_message_id=message.message_id)
        

log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
